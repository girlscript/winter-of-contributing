Android Notifications

A notification is a message you can display to the user outside of your application's normal UI.
When you tell the system to issue a notification, it first appears as an icon in the notification area. To see the details of the notification, the user opens the notification drawer. Both the notification area and the notification drawer are system-controlled areas that the user can view at any time.

How to Create and Send Notifications?

Step 1 - Create Notification Builder

As a first step is to create a notification builder using NotificationCompat.Builder.build(). You will use Notification Builder to set various Notification properties like its small and large icons, title, priority etc.
          NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)
          
Step 2 - Setting Notification Properties

Once you have Builder object, you can set its Notification properties using Builder object as per your requirement. But this is mandatory to set at least following âˆ’
                                 A small icon, set by setSmallIcon()
                                 A title, set by setContentTitle()
                                 Detail text, set by setContentText()

mBuilder.setSmallIcon(R.drawable.notification_icon);
mBuilder.setContentTitle("Notification Alert, Click Me!");
mBuilder.setContentText("Hi, This is Android Notification Detail!");

 Step 3 - Attach Actions
 
 This is an optional part and required if you want to attach an action with the notification.
 An action allows users to go directly from the notification to an Activity in your application.
 The action is defined by a PendingIntent containing an Intent that starts an Activity in your            application. To associate the PendingIntent with a gesture, call the appropriate method of     NotificationCompat.Builder.
 
 "A PendingIntent object" helps you to perform an action on your applications behalf, often at a later time, without caring of whether or not your application is running.
 
           Intent resultIntent = new Intent(this, ResultActivity.class);
           TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
           stackBuilder.addParentStack(ResultActivity.class);

            // Adds the Intent that starts the Activity to the top of the stack
            stackBuilder.addNextIntent(resultIntent);
            PendingIntent resultPendingIntent =                 stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
            mBuilder.setContentIntent(resultPendingIntent);
            
 Step 4 - Issue the notification
 
Finally, you pass the Notification object to the system by calling NotificationManager.notify() to send your notification. Make sure you call NotificationCompat.Builder.build() method on builder object before notifying it. This method combines all of the options that have been set and return a new Notification object.

              NotificationManager mNotificationManager = (NotificationManager)                     getSystemService(Context.NOTIFICATION_SERVICE); 
              // notificationID allows you to update the notification later on.
               mNotificationManager.notify(notificationID, mBuilder.build());
               
Let's see an example of MainActivity.java which includes each of following lifecycle methods - 
  
  package com.example.notificationdemo;

import android.app.Activity;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.support.v4.app.NotificationCompat;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

public class MainActivity extends Activity {
   Button b1;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      b1 = (Button)findViewById(R.id.button);
      b1.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View v) {
            addNotification();
         }
      });
   }

   private void addNotification() {
      NotificationCompat.Builder builder =
         new NotificationCompat.Builder(this)
         .setSmallIcon(R.drawable.abc)
         .setContentTitle("Notifications Example")
         .setContentText("This is a test notification");

      Intent notificationIntent = new Intent(this, MainActivity.class);
      PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent,
         PendingIntent.FLAG_UPDATE_CURRENT);
      builder.setContentIntent(contentIntent);

      // Add as notification
      NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
      manager.notify(0, builder.build());
   }
}

Following is the content of the modified main activity file src/com.example.notificationdemo/NotificationView.java.

package com.example.notificationdemo;
import android.os.Bundle;
import android.app.Activity;

public class NotificationView extends Activity{
   @Override
   public void onCreate(Bundle savedInstanceState){
      super.onCreate(savedInstanceState);
      setContentView(R.layout.notification);
   }
}


  
 
