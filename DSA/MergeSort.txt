What is Merge Sort?

Merge Sort is an efficient, general-purpose, comparison-based sorting algorithm. It is divide and conquer algorithm. It divides the input array into two halves, calls itself for two halves and then merges the two sorted halves. Merge() function is used for merging two halves.

Merge Sort is also known as Stable sort which means that the same element in an array maintain their original positions with repect to each other.
Time Complexity of Merge Sort is O(nlogn).
Space Complexity of Merge Sort is O(n).

Algorithm of Merge Sort :-

Step 1 - Take input of data.
Step 2 - Call MergeSort() function.
Step 3 - Recursively split the array into two equal parts.
Step 4 - Split them until we get at most one element in both half.
Step 5 - Combine the result by invoking Merge().
Step 6 - It combines the individually sorted data from low to mid and mid+1 to high.
Step 7 - Return to main and display the result.
Step 8 - Exit.

Program of Merge Sort :-

#include <iostream>
 
using namespace std;
 
// A function to merge the two half into a sorted data.
void Merge(int *a, int low, int high, int mid)
{
	// We have low to mid and mid+1 to high already sorted.
	int i, j, k, temp[high-low+1];
	i = low;
	k = 0;
	j = mid + 1;
 
	// Merge the two parts into temp[].
	while (i <= mid && j <= high)
	{
		if (a[i] < a[j])
		{
			temp[k] = a[i];
			k++;
			i++;
		}
		else
		{
			temp[k] = a[j];
			k++;
			j++;
		}
	}
 
	// Insert all the remaining values from i to mid into temp[].
	while (i <= mid)
	{
		temp[k] = a[i];
		k++;
		i++;
	}
 
	// Insert all the remaining values from j to high into temp[].
	while (j <= high)
	{
		temp[k] = a[j];
		k++;
		j++;
	}
 
 
	// Assign sorted data stored in temp[] to a[].
	for (i = low; i <= high; i++)
	{
		a[i] = temp[i-low];
	}
}
 
// A function to split array into two parts.
void MergeSort(int *a, int low, int high)
{
	int mid;
	if (low < high)
	{
		mid=(low+high)/2;
		// Split the data into two half.
		MergeSort(a, low, mid);
		MergeSort(a, mid+1, high);
 
		// Merge them to get sorted output.
		Merge(a, low, high, mid);
	}
}
 
int main()
{
	int n, i;
	cout<<"\nEnter the number of data element to be sorted: ";
	cin>>n;
 
	int arr[n];
	for(i = 0; i < n; i++)
	{
		cout<<"Enter element "<<i+1<<": ";
		cin>>arr[i];
	}
 
	MergeSort(arr, 0, n-1);
 
	// Printing the sorted data.
	cout<<"\nSorted Data ";
	for (i = 0; i < n; i++)
        cout<<"->"<<arr[i];
 
	return 0;
}
