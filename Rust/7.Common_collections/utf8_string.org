#+TITLE: Storing UTF8 strings
+ It‚Äôs useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text.
** Examples of UTF8 Encoded Strings :
 #+begin_src rust
    let hello = String::from("ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ");
    let hello = String::from("Dobr√Ω den");
    let hello = String::from("Hello");
    let hello = String::from("◊©÷∏◊Å◊ú◊ï÷π◊ù");
    let hello = String::from("‡§®‡§Æ‡§∏‡•ç‡§§‡•á");
    let hello = String::from("„Åì„Çì„Å´„Å°„ÅØ");
    let hello = String::from("ÏïàÎÖïÌïòÏÑ∏Ïöî");
    let hello = String::from("‰Ω†Â•Ω");
    let hello = String::from("Ol√°");
    let hello = String::from("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ");
    let hello = String::from("Hola");

 #+end_src
 * All these are valid strings .
** Updating a string :
+ We can grow a String by using the push_str method to append a string slice.
 #+begin_src rust
let mut s = String::from("foo");
s.push_str("bar");
 #+end_src
 * =s= will hence contain *foobar*.
*** Concatenation with the + Operator or the format! Macro :
+ using =+= :
 #+begin_src rust
 let s1 = String::from("Hello, ");
 let s2 = String::from("world!");
 let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used

 #+end_src
 * =s3= will contain *Hello, world!*
** Indexing into String :
+ In many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation.
+ However, if you try to access parts of a String using indexing syntax in Rust, you‚Äôll get an error.
 #+begin_src rust
let s1 = String::from("hello");
let h = s1[0]; // will result in error‚Äº

 #+end_src
 * Therefore by this we have established that Rust doesn't support indexing , to learn why is this so we have learn about the internal representation .
*** Internal representation of strings  :
+ A String is a wrapper over a =Vec<u8>=.
 #+begin_src rust
    let hello = String::from("Hola"); // len is 4‚Äº
    let hello = String::from("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"); // len is 24‚Äº

 #+end_src
  + It takes *24 bytes to encode* =–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ= , even though it *has 12 characters* , because each *unicode scalar* takes *2 bytes of storage* .

  + *Therefore, an index into the string‚Äôs bytes will not always correlate to a valid Unicode scalar value*.

  + Hence Rust traded out traditional indexing to support UTF8 support .
** Bytes and Scalar Values and Grapheme Clusters :
+ Another point about UTF-8 is that there are actually three relevant ways to look at strings from Rust‚Äôs perspective: *as bytes, scalar values, and grapheme clusters*.
+ If we look at the Hindi word =‡§®‡§Æ‡§∏‡•ç‡§§‡•á= written in the Devanagari script, it is stored as a vector of =u8= values that looks like this:

 #+begin_src rust
[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
224, 165, 135]

 #+end_src

+ That‚Äôs *18 bytes and is how computers ultimately store this data*. /If we look at them as Unicode scalar values/, which are what Rust‚Äôs *char* type is, those bytes look like this:

 #+begin_src rust
['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']
 #+end_src

+ *There are six char values here*, but *the fourth and sixth* are *not letters*: they‚Äôre diacritics that don‚Äôt make sense on their own.

+  Finally, if we look at them as *grapheme clusters*, we‚Äôd get what a person would call the four letters that make up the Hindi word:

 #+begin_src rust
["‡§®", "‡§Æ", "‡§∏‡•ç", "‡§§‡•á"]
#+end_src

+ *Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs*, /no matter what human language the data is in/.

+ A *final reason Rust doesn‚Äôt allow us to index* into a =String= /to get a character is that indexing operations are expected to always take/ =constant time (O(1))=.

+ *But it isn‚Äôt possible to guarantee that performance* with a =String=, *because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were*.
** Slicing Strings :

+ Indexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: *a byte value, a character, a grapheme cluster, or a string slice*.
+ Therefore, Rust asks you to be more specific if you really need to use indices to create string slices.
+ /To be more specific in your indexing and indicate that you want a string slice, rather than indexing using [] with a single number/, you *can use* =[]= *with a range to create a string slice containing particular bytes*.
 #+begin_src rust

let hello = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";

let s = &hello[0..4];

 #+end_src
  * Here, =s= will be a =&str= that contains the first 4 bytes of the string. Earlier, we mentioned that each of these characters was 2 bytes, which means =s= will be =–ó–¥=.

  * *If you use something like* =&hello[0..1]= , well *Rust compiler will panic at runtime in the same way as if an invalid index were accessed in a vector* .

** Strings Are Not So Simple‚Äº:
+ Different programming languages make different choices about how to present this complexity to the programmer.
+ Rust has chosen to make the correct handling of String data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront.
+ This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development.
+ *MORE IMPORTANTLY RUST LOVES YOU, YES YOU* üíóü¶Ä.
