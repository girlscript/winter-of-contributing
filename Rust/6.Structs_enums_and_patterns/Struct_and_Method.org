#+TITLE: Struct And Method Syntax
** Structs:
+ Structs are similar to Tuples.
+ Structs can piece together elements of different types.
+ Defining struct in rust can be done as shown below:
 #+begin_src rust
    let mut user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    user1.email = String::from("anotheremail@example.com");

 #+end_src
  * Elements of struct can be accessed using the *dot operator* .

+ New instances can be created using the *struct update syntax*
#+begin_src rust

let user2 = User {
        email: String::from("another@example.com"),
        ..user1
};

#+end_src

*** Tuple Structs :
   + You can also define structs that look similar to tuples, called tuple structs.
   + Tuple structs have the added meaning the struct name provides but don’t have names associated with their fields; rather, they just have the types of the fields.
   + Tuple structs are useful when you want to give the whole tuple a name and make the tuple be a different type from other tuples, and naming each field as in a regular struct would be verbose or redundant.
    #+begin_src rust
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);

    #+end_src
   #+begin_quote
Note that the black and origin values are different types, because they’re instances of different tuple structs. Each struct you define is its own type, even though the fields within the struct have the same types.
   #+end_quote

** Method Syntax:
+ Methods are similar to functions: they’re declared with the =fn= keyword and their name, they can have parameters and a return value, and they contain some code that is run when they’re called from somewhere else.
+ Methods are different from functions in that they’re defined within the context of a struct.
+ The 1st parameter is always =Self=, which represents the instance of the struct the method is being called on.
**** Defining Methods :
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle { // impl block for Rectangle struct
    fn area(&self) -> u32 { //area is the *method* here
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}

#+end_src
+ Structs let you create custom types that are meaningful for your domain.
+ By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear.
+ In =impl= blocks, you can define functions that are associated with your type, and methods are a kind of associated function that let you specify the behavior that instances of your structs have.
