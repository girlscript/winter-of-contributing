#+TITLE: Reference Validation with Lifetimes
+ When we are dealing with references, we have to make sure that the referencing data stay alive until we stop using the references.
+ A *resource can only have one owner at a time*. When it /goes out of the scope, Rust removes it from the Memory/.
+ When *we want to reuse the same resource, we are referencing it/ borrowing its content*.
+ When dealing with =references=, we have to specify lifetime annotations to provide instructions for the =compiler= to /set how long those referenced resources should be alive/.
** Usage
 + Lifetimes are denoted with an apostrophe. By convention, a lowercase letter is used for naming.
 + Usually starts with ='a= and *follows alphabetic order* when we need to add *multiple lifetime* annotations.
*** On Function Declaration
+ Input and output parameters with references should attach lifetimes after the =&= sign.
+ After the function name, we should mention that the given lifetimes are generic types.

***  On Struct or Enum Declaration
+ Elements with references should attach lifetimes after the =&= sign.
+ After the name of the struct or enum, we should mention that the given lifetimes are generic types.
#+begin_src rust
// Single element
// Data of x should live at least as long as Struct exists
struct Struct<'a> {
    x: &'a str
}

// Multiple elements
// Data of x and y should live at least as long as Struct exists
struct Struct<'a> {
    x: &'a str,
    y: &'a str
}


// Variant with a single element
// Data of the variant should live at least as long as Enum exists
enum Enum<'a> {
    Variant(&'a Type)
}

#+end_src

*** With Impls and Traits

 #+begin_src rust
struct Struct<'a> {
    x: &'a str
}
    impl<'a> Struct<'a> {
        fn function<'a>(&self) -> &'a str {
            self.x
        }
    }


struct Struct<'a> {
    x: &'a str,
    y: &'a str
}
    impl<'a> Struct<'a> {
        fn new(x: &'a str, y: &'a str) -> Struct<'a> { // No need to specify <'a> after new; impl already has it
          Struct {
              x : x,
              y : y
          }
        }
    }


// ðŸ”Ž
impl<'a> Trait<'a> for Type
impl<'a> Trait for Type<'a>

 #+end_src
*** With Generic Types
#+begin_src rust
// ðŸ”Ž
fn function<F>(f: F) where for<'a> F: FnOnce(&'a Type)
struct Struct<F> where for<'a> F: FnOnce(&'a Type) { x: F }
enum Enum<F> where for<'a> F: FnOnce(&'a Type) { Variant(F) }
impl<F> Struct<F> where for<'a> F: FnOnce(&'a Type) { fn x(&self) -> &F { &self.x } }

#+end_src
*** Lifetime Elision
+ In order to make common patterns more ergonomic, Rust allows *lifetimes to be elided/omitted*.
+ This process is called *Lifetime Elision*.
+ Lifetime annotations of fn definitions can be elided if its parameter list has either :
  * *Only one input parameter passes by reference*.
  * A parameter with either =&self= or =&mut self= reference.
*** Static annotations
+ ='static= lifetime annotation is a =reserved= lifetime annotation. *These references are valid for the entire program*.
+ They are saved in the data segment of the binary and the data referred to will never go out of scope.
 #+begin_src rust
static N: i32 = 5; // A constant with 'static lifetime

let a = "Hello, world."; // a: &'static str


fn index() -> &'static str { // No need to mention <'static> ; fn index Ì¶<Ì¶'Ì¶sÌ¶tÌ¶aÌ¶tÌ¶iÌ¶cÌ¶>Ì¶
    "Hello, world!"
}

 #+end_src
