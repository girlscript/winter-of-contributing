#+TITLE: Pattern Syntax


** Matching Literals
+ This code prints =one= because the value in =x= is *1*. This syntax is useful when you want your code to take an action if it gets a particular concrete value.
#+begin_src rust
    let x = 1;

    match x {
        1 => println!("one"),
        2 => println!("two"),
        3 => println!("three"),
        _ => println!("anything"),
    }

#+end_src

** Matching Named Variables
#+begin_src rust
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(y) => println!("Matched, y = {:?}", y),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {:?}", x, y);


#+end_src



** Multiple Patterns
#+begin_src rust
    let x = 1;

    match x {
        1 | 2 => println!("one or two"),
        3 => println!("three"),
        _ => println!("anything"),
    }


#+end_src
+ Prints =one or two=.


** Matching Ranges of Values with ..=

+ The =..== syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the range, that arm will execute:
 #+begin_src rust
    let x = 5;

    match x {
        1..=5 => println!("one through five"),
        _ => println!("something else"),
    }

 #+end_src

  * Ranges are only allowed with numeric values or =char= values, because the compiler checks that the range isn’t empty at compile time.

  * The only types for which Rust can tell if a range is empty or not are =char= and numeric values.

   #+begin_src rust
    let x = 'c';

    match x {
        'a'..='j' => println!("early ASCII letter"),
        'k'..='z' => println!("late ASCII letter"),
        _ => println!("something else"),
    }

   #+end_src

   - Rust can tell that =c= is within the first pattern’s range and prints =early ASCII letter=.


** Summary

+ There is lot more to explore in pattern matching with and it is really powerful , but will be out of scope of this source , user is adviced to look those up as when they wish and feel comfortable .
+ Rust’s patterns are very useful in that they help distinguish between different kinds of data.
+ When used in =match= expressions, Rust ensures your patterns cover every possible value, or your program won’t compile.
+ Patterns in =let= statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables.
+ We can create simple or complex patterns to suit our needs
