#+TITLE: Data Types And Compound Types

* DATA TYPES :
 + Every value in Rust is of a certain data type, which tells Rust what kind of data is being specified so it knows how to work with that data

* SCALAR TYPES :
 + A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.

** Integer Types :
+ An integer is a number without a fractional component.
  | Length  | Signed | Unsigned |
  |---------+--------+----------|
  | 8-bit   | i8     | u8       |
  | 16-bit  | i16    | u16      |
  | 32-bit  | i32    | u32      |
  | 64-bit  | i64    | u64      |
  | 128-bit | i128   | u128     |
  | arch    | isize  | usize    |
+ Signed numbers are stored using Two's complement representation .
+ isize and usize are depends on the architecture of the computer on which the program is running on .
** Floating-Point Types :
+ Rust also has two primitive types for floating-point numbers, which are numbers with decimal points. Rustâ€™s floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively. The default type is f64 because on modern CPUs itâ€™s roughly the same speed as f32 but is capable of more precision.
+ The f32 type is a single-precision float, and f64 has double precision.
** The Boolean Type :
+ As in most other programming languages, a Boolean type in Rust has two possible values: true and false. Booleans are one byte in size
 #+begin_src rust
 fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}
 #+end_src
** Character Type :
+ Rustâ€™s char type is the languageâ€™s most primitive alphabetic type
+ Rustâ€™s char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust.
 #+begin_src rust
 fn main() {
    let c = 'z';
    let z = 'â„¤';
    let heart_eyed_cat = 'ðŸ˜»';
}
 #+end_src

* Compound Types :
Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.

** Tuple :
+ A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.
+ We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple donâ€™t have to be the same.
+ The variable tup binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:

  #+begin_src rust
fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {}", y);
}
 #+end_src

+ We can access a tuple element directly by using a period (.) followed by the index of the value we want to access.

** Array :
+ Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.
+ Arrays are useful when you want your data allocated on the stack rather than the heap or when you want to ensure you always have a fixed number of elements

+ An array is a single chunk of memory of a known, fixed size that can be allocated on the stack. You can access elements of an array using indexing

 #+begin_src rust
 fn main() {
    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];
}
 #+end_src
