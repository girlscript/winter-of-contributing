TOP-DOWN APPROACH
// Time complexity=O(n)
// space complexity=O(n)

#include<bits/stdc++.h>
using namespace std;
int find(int a[],int n,int dp[]){
   if(n<=0){
       return 0;
   }
   
    if(dp[n]!=-1){
        return dp[n];
    }
    
    int output1=a[0]+find(a+2,n-2,dp); //first case:including first house then moving alternative
    int output2= find(a+1,n-1,dp);// second case: not including first house then calling function for n-1 houses
    
    int ans=max(output1,output2);// finding max of two cases
    dp[n]=ans;
    return dp[n];
    
    
}

int main(){
    
    
int n; // total number of house
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++){  // amount of money in every ith house
        cin>>a[i];
      
    }
    
    int dp[n];      //dp array
    for(int i=0;i<n+1;i++){
        dp[i]=-1;
    }
    
    cout<<(find(a,n,dp));
    
    
    return 0;
}




BOTTOM-UP APPROACH
// Time complexity =O(n)
// space complexity=O(1)

    int find(int arr[],int n){
    if(n==0) return 0;
    if(n==1) return arr[0];
    if(n==2) return max(arr[0],arr[1]);
       int curr;
    int prev1=max(arr[0],arr[1]);
    int prev2=arr[0];
   for(int i=2;i<n;i++){
      curr=max(prev1,arr[i]+prev2);
     prev2=prev1;
     prev1=curr;
     }
    return curr;

}



int main(){
int n; // total number of house
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++){  // amount of money in every ith house
        cin>>a[i];
      
    }
cout<<find(a,n);
}
